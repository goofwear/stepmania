#ifndef STEPS_H
#define STEPS_H
/*
-----------------------------------------------------------------------------
 Class: Steps

 Desc: Holds note information for a Song.  A Song may have one or more Notess.
	A Steps can be played by one or more Styles.  See StyleDef.h for more info on
	Styles.

 Copyright (c) 2001-2002 by the person(s) listed below.  All rights reserved.
	Chris Danford
-----------------------------------------------------------------------------
*/

#include "GameConstantsAndTypes.h"
#include "PlayerNumber.h"
#include "Grade.h"
class NoteData;
class Profile;

class Steps
{
public:
	Steps();
	~Steps();

	// initializers
	void AutogenFrom( const Steps *parent, StepsType ntTo );
	void CopyFrom( Steps* pSource, StepsType ntTo );
	void CreateBlank( StepsType ntTo );

	void Compress() const;
	void Decompress() const;
	void DeAutogen();	/* If this Steps is autogenerated, make it a real Steps. */

	// Use a special value of difficulty
	bool IsAnEdit() const { return m_Difficulty == DIFFICULTY_EDIT; }
	bool WasLoadedFromProfile() const { return m_LoadedFromProfile != PROFILE_SLOT_INVALID; }
	CString GetDescription() const { return Real()->m_sDescription; }
	Difficulty GetDifficulty() const { return Real()->m_Difficulty; }
	int GetMeter() const { return Real()->m_iMeter; }
	const float *GetRadarValues() const { return Real()->m_fRadarValues; }

	void SetDescription(CString desc);
	void SetDifficulty(Difficulty d);
	void SetMeter(int meter);
	void SetRadarValue(int r, float val);
	bool IsAutogen() const;	// Was created by autogen?
	float PredictMeter() const;
	
	StepsType	m_StepsType;

	void		GetNoteData( NoteData* pNoteDataOut ) const;
	void		SetNoteData( const NoteData* pNewNoteData );
	void		SetSMNoteData( const CString &notes_comp, const CString &attacks_comp );
	void		GetSMNoteData( CString &notes_comp_out, CString &attacks_comp_out ) const;

	void TidyUpData();

protected:
	/* If this Steps is autogenerated, this will point to the autogen
	 * source.  If this is true, notes_comp will always be NULL. */
	const Steps *parent;

	/* We can have one or both of these; if we have both, they're always identical.
	 * Call Compress() to force us to only have notes_comp; otherwise, creation of 
	 * these is transparent. */
	mutable NoteData *notes;
	struct CompressedNoteData
	{
		CString notes, attacks;
	};
	mutable CompressedNoteData *notes_comp;

	const Steps *Real() const;

	/* These values are pulled from the autogen source first, if there is one. */
	ProfileSlot		m_LoadedFromProfile;	// PROFILE_SLOT_INVALID if wasn't loaded from a profile
	CString			m_sDescription;		// Step author, edit name, or something meaningful
	Difficulty		m_Difficulty;		// difficulty classification
	int				m_iMeter;			// difficulty rating from MIN_METER to MAX_METER
	float			m_fRadarValues[NUM_RADAR_CATEGORIES];	// between 0.0-1.2 starting from 12-o'clock rotating clockwise

};

bool CompareNotesPointersByRadarValues(const Steps* pNotes1, const Steps* pNotes2);
bool CompareNotesPointersByMeter(const Steps *pNotes1, const Steps* pNotes2);
bool CompareNotesPointersByDifficulty(const Steps *pNotes1, const Steps *pNotes2);
void SortNotesArrayByDifficulty( vector<Steps*> &arrayNotess );
bool CompareStepsPointersByTypeAndDifficulty(const Steps *pStep1, const Steps *pStep2);
void SortStepsByTypeAndDifficulty( vector<Steps*> &arraySongPointers );
void SortStepsPointerArrayByMostPlayed( vector<Steps*> &vStepsPointers, ProfileSlot slot );
void SortStepsPointerArrayByMostPlayed( vector<Steps*> &vStepsPointers, Profile* pProfile );

#endif
